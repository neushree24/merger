/** ImplantTSScannor.cpp generated by R. Yokoyama 09/06/2018 **/
#include "ImplantTSScannor.hpp"

const std::string ImplantTSScannor::kMsgPrefix("[ImplantTSScannor]:");

void ImplantTSScannor::SetReader()
{
    TSScannorBase<PspmtData>::SetReader();
    std::string br_name = yaml_reader_->GetString("PixieBranchName");
    tree_data_ = new TTreeReaderValue<PspmtData>(*tree_reader_,br_name.c_str());
    std::cout << kMsgPrefix << "TTreeReaderValue: " << br_name << " created." << std::endl;

    low_gain_min_ = yaml_reader_->GetDouble("MinLowGainDynEnergy");
    low_gain_max_ = yaml_reader_->GetDouble("MaxLowGainDynEnergy");
    std::cout << kMsgPrefix << "Implant range on dynode low gain: " << low_gain_min_ << " - " << low_gain_max_ << std::endl;
    return;
}

Bool_t ImplantTSScannor::IsInGate()
{
    auto pspmt_low = tree_data_->Get()->low_gain_;
    if(!pspmt_low.valid_)
        return false;

	 // Energy gate on pspmt low energy
    if(pspmt_low.energy_ < 2000 || pspmt_low.energy_ > 8000 )
        return false;

    // Anti-gating on veto
    {
        if(tree_data_->Get()->veto_first_.energy_>10. && tree_data_->Get()->veto_second_.energy_>10.)
            return false;
    }

    // Gating on dE Si
    //{
    //    const Double_t de_top = tree_data_->Get()->desi_top_.energy_;
    //    const Double_t de_bottom = tree_data_->Get()->desi_bottom_.energy_;

    //    if( de_top>5200. && de_top<5600. ) //83Ga
    //    //if( de_top>3500. && de_top<4500. ) //78Ni
    //        return true;
    //    else if ( de_bottom>5600. && de_bottom<6400. ) //83Ga
    //    //else if ( de_bottom>4000. && de_bottom<5000. ) //78Ni
    //        return true;
    //    else
    //        return false;
    //}
    return true;
}

const std::string MergedImplantTSScannor::kMsgPrefix("[MergedImplantTSScannor]:");

void MergedImplantTSScannor::SetReader()
{
    TSScannorBase<OutputTreeData<PspmtData, TreeData>>::SetReader();
    std::string br_name = yaml_reader_->GetString("PixieBranchName");
    tree_data_ = new TTreeReaderValue<OutputTreeData<PspmtData, TreeData>>(*tree_reader_,br_name.c_str());
    std::cout << kMsgPrefix << "TTreeReaderValue: " << br_name << " created." << std::endl;

    return;
}

Bool_t MergedImplantTSScannor::IsInGate()
{
    if(tree_data_->Get()->output_vec_.size()==0)
        return false;
    else
        return true;
}
